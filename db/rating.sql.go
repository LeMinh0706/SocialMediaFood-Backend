// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: rating.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRating = `-- name: CreateRating :one
INSERT INTO rating (
    from_account_id,
    to_account_id,
    star,
    content
) VALUES (
    $1, $2, $3, $4
) RETURNING from_account_id, to_account_id, star, content, created_at
`

type CreateRatingParams struct {
	FromAccountID int64       `json:"from_account_id"`
	ToAccountID   int64       `json:"to_account_id"`
	Star          int32       `json:"star"`
	Content       pgtype.Text `json:"content"`
}

func (q *Queries) CreateRating(ctx context.Context, arg CreateRatingParams) (Rating, error) {
	row := q.db.QueryRow(ctx, createRating,
		arg.FromAccountID,
		arg.ToAccountID,
		arg.Star,
		arg.Content,
	)
	var i Rating
	err := row.Scan(
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Star,
		&i.Content,
		&i.CreatedAt,
	)
	return i, err
}

const deleteRating = `-- name: DeleteRating :exec
DELETE FROM rating WHERE from_account_id = $1 AND to_account_id = $2
`

type DeleteRatingParams struct {
	FromAccountID int64 `json:"from_account_id"`
	ToAccountID   int64 `json:"to_account_id"`
}

func (q *Queries) DeleteRating(ctx context.Context, arg DeleteRatingParams) error {
	_, err := q.db.Exec(ctx, deleteRating, arg.FromAccountID, arg.ToAccountID)
	return err
}

const getListRating = `-- name: GetListRating :many
SELECT r.from_account_id, r.to_account_id, r.star, r.content, r.created_at, a.fullname, a.url_avatar, a.url_background_profile FROM rating r JOIN accounts a
ON r.from_account_id = a.id
WHERE to_account_id = $1
LIMIT $2
OFFSET $3
`

type GetListRatingParams struct {
	ToAccountID int64 `json:"to_account_id"`
	Limit       int32 `json:"limit"`
	Offset      int32 `json:"offset"`
}

type GetListRatingRow struct {
	FromAccountID        int64              `json:"from_account_id"`
	ToAccountID          int64              `json:"to_account_id"`
	Star                 int32              `json:"star"`
	Content              pgtype.Text        `json:"content"`
	CreatedAt            pgtype.Timestamptz `json:"created_at"`
	Fullname             string             `json:"fullname"`
	UrlAvatar            string             `json:"url_avatar"`
	UrlBackgroundProfile string             `json:"url_background_profile"`
}

func (q *Queries) GetListRating(ctx context.Context, arg GetListRatingParams) ([]GetListRatingRow, error) {
	rows, err := q.db.Query(ctx, getListRating, arg.ToAccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetListRatingRow{}
	for rows.Next() {
		var i GetListRatingRow
		if err := rows.Scan(
			&i.FromAccountID,
			&i.ToAccountID,
			&i.Star,
			&i.Content,
			&i.CreatedAt,
			&i.Fullname,
			&i.UrlAvatar,
			&i.UrlBackgroundProfile,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateRating = `-- name: UpdateRating :exec
UPDATE rating SET content = $3, star = $4
WHERE from_account_id = $1 AND to_account_id = $2
`

type UpdateRatingParams struct {
	FromAccountID int64       `json:"from_account_id"`
	ToAccountID   int64       `json:"to_account_id"`
	Content       pgtype.Text `json:"content"`
	Star          int32       `json:"star"`
}

func (q *Queries) UpdateRating(ctx context.Context, arg UpdateRatingParams) error {
	_, err := q.db.Exec(ctx, updateRating,
		arg.FromAccountID,
		arg.ToAccountID,
		arg.Content,
		arg.Star,
	)
	return err
}
