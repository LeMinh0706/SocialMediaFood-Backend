// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addEmail = `-- name: AddEmail :exec
UPDATE users SET email = $2
WHERE id = $1
`

type AddEmailParams struct {
	ID    int64       `json:"id"`
	Email pgtype.Text `json:"email"`
}

func (q *Queries) AddEmail(ctx context.Context, arg AddEmailParams) error {
	_, err := q.db.Exec(ctx, addEmail, arg.ID, arg.Email)
	return err
}

const login = `-- name: Login :one
SELECT id, username, hash_password FROM users
WHERE username = $1
`

type LoginRow struct {
	ID           int64  `json:"id"`
	Username     string `json:"username"`
	HashPassword string `json:"hash_password"`
}

func (q *Queries) Login(ctx context.Context, username string) (LoginRow, error) {
	row := q.db.QueryRow(ctx, login, username)
	var i LoginRow
	err := row.Scan(&i.ID, &i.Username, &i.HashPassword)
	return i, err
}

const register = `-- name: Register :one
INSERT INTO users(
    username, 
    email,
    hash_password
) VALUES (
    $1, $2, $3
) RETURNING id, username, email, created_at
`

type RegisterParams struct {
	Username     string      `json:"username"`
	Email        pgtype.Text `json:"email"`
	HashPassword string      `json:"hash_password"`
}

type RegisterRow struct {
	ID        int64              `json:"id"`
	Username  string             `json:"username"`
	Email     pgtype.Text        `json:"email"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) Register(ctx context.Context, arg RegisterParams) (RegisterRow, error) {
	row := q.db.QueryRow(ctx, register, arg.Username, arg.Email, arg.HashPassword)
	var i RegisterRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}
