// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: comment.sql

package db

import (
	"context"
	"database/sql"
)

const createComment = `-- name: CreateComment :one
INSERT INTO posts(
    post_type_id,
    user_id,
    post_top_id,
    description,
    date_create_post
) VALUES (
    2, $1, $2, $3, $4
) RETURNING id, post_type_id, user_id, post_top_id, description, date_create_post
`

type CreateCommentParams struct {
	UserID         int64          `json:"user_id"`
	PostTopID      sql.NullInt64  `json:"post_top_id"`
	Description    sql.NullString `json:"description"`
	DateCreatePost int64          `json:"date_create_post"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Post, error) {
	row := q.db.QueryRowContext(ctx, createComment,
		arg.UserID,
		arg.PostTopID,
		arg.Description,
		arg.DateCreatePost,
	)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.PostTypeID,
		&i.UserID,
		&i.PostTopID,
		&i.Description,
		&i.DateCreatePost,
	)
	return i, err
}

const getComment = `-- name: GetComment :one
SELECT id, post_type_id, user_id, post_top_id, description, date_create_post FROM posts 
WHERE post_type_id = 2 AND
post_top_id = $1
LIMIT 1
`

func (q *Queries) GetComment(ctx context.Context, postTopID sql.NullInt64) (Post, error) {
	row := q.db.QueryRowContext(ctx, getComment, postTopID)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.PostTypeID,
		&i.UserID,
		&i.PostTopID,
		&i.Description,
		&i.DateCreatePost,
	)
	return i, err
}

const listComment = `-- name: ListComment :many
SELECT id, post_type_id, user_id, post_top_id, description, date_create_post FROM posts 
WHERE post_type_id = 2 AND 
post_top_id = $1
LIMIT $2
OFFSET $3
`

type ListCommentParams struct {
	PostTopID sql.NullInt64 `json:"post_top_id"`
	Limit     int32         `json:"limit"`
	Offset    int32         `json:"offset"`
}

func (q *Queries) ListComment(ctx context.Context, arg ListCommentParams) ([]Post, error) {
	rows, err := q.db.QueryContext(ctx, listComment, arg.PostTopID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Post{}
	for rows.Next() {
		var i Post
		if err := rows.Scan(
			&i.ID,
			&i.PostTypeID,
			&i.UserID,
			&i.PostTopID,
			&i.Description,
			&i.DateCreatePost,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
