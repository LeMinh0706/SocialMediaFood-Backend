// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: report.sql

package db

import (
	"context"
)

const createReport = `-- name: CreateReport :one
INSERT INTO report_post (
    account_id,
    post_id,
    issue_id
) VALUES (
    $1, $2, $3
)RETURNING id, account_id, issue_id, post_id, created_at
`

type CreateReportParams struct {
	AccountID int64 `json:"account_id"`
	PostID    int64 `json:"post_id"`
	IssueID   int32 `json:"issue_id"`
}

func (q *Queries) CreateReport(ctx context.Context, arg CreateReportParams) (ReportPost, error) {
	row := q.db.QueryRow(ctx, createReport, arg.AccountID, arg.PostID, arg.IssueID)
	var i ReportPost
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.IssueID,
		&i.PostID,
		&i.CreatedAt,
	)
	return i, err
}

const getIssue = `-- name: GetIssue :one
SELECT id, name, is_deleted FROM issue_post
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetIssue(ctx context.Context, id int32) (IssuePost, error) {
	row := q.db.QueryRow(ctx, getIssue, id)
	var i IssuePost
	err := row.Scan(&i.ID, &i.Name, &i.IsDeleted)
	return i, err
}

const getListIssue = `-- name: GetListIssue :many
SELECT id, name, is_deleted FROM issue_post
`

func (q *Queries) GetListIssue(ctx context.Context) ([]IssuePost, error) {
	rows, err := q.db.Query(ctx, getListIssue)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []IssuePost{}
	for rows.Next() {
		var i IssuePost
		if err := rows.Scan(&i.ID, &i.Name, &i.IsDeleted); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getYourReport = `-- name: GetYourReport :many
SELECT id, issue_id FROM report_post
WHERE account_id = $1 AND post_id = $2
`

type GetYourReportParams struct {
	AccountID int64 `json:"account_id"`
	PostID    int64 `json:"post_id"`
}

type GetYourReportRow struct {
	ID      int64 `json:"id"`
	IssueID int32 `json:"issue_id"`
}

func (q *Queries) GetYourReport(ctx context.Context, arg GetYourReportParams) ([]GetYourReportRow, error) {
	rows, err := q.db.Query(ctx, getYourReport, arg.AccountID, arg.PostID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetYourReportRow{}
	for rows.Next() {
		var i GetYourReportRow
		if err := rows.Scan(&i.ID, &i.IssueID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
