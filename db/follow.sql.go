// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: follow.sql

package db

import (
	"context"
)

const countFollow = `-- name: CountFollow :one
SELECT count(id) FROM follower 
WHERE from_follow = $1 AND status = 'pending'
`

func (q *Queries) CountFollow(ctx context.Context, fromFollow int64) (int64, error) {
	row := q.db.QueryRow(ctx, countFollow, fromFollow)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countFollower = `-- name: CountFollower :one
SELECT count(id) FROM follower 
WHERE from_follow = $1 AND status = 'accepted'
`

func (q *Queries) CountFollower(ctx context.Context, fromFollow int64) (int64, error) {
	row := q.db.QueryRow(ctx, countFollower, fromFollow)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countFriend = `-- name: CountFriend :one
SELECT count(id) FROM follower 
WHERE from_follow = $1 AND status = 'friend'
`

func (q *Queries) CountFriend(ctx context.Context, fromFollow int64) (int64, error) {
	row := q.db.QueryRow(ctx, countFriend, fromFollow)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createFollow = `-- name: CreateFollow :one
INSERT INTO follower ( 
    from_follow,
    to_follow,
    status
) VALUES ($1, $2, $3)
RETURNING id, from_follow, to_follow, status
`

type CreateFollowParams struct {
	FromFollow int64  `json:"from_follow"`
	ToFollow   int64  `json:"to_follow"`
	Status     string `json:"status"`
}

func (q *Queries) CreateFollow(ctx context.Context, arg CreateFollowParams) (Follower, error) {
	row := q.db.QueryRow(ctx, createFollow, arg.FromFollow, arg.ToFollow, arg.Status)
	var i Follower
	err := row.Scan(
		&i.ID,
		&i.FromFollow,
		&i.ToFollow,
		&i.Status,
	)
	return i, err
}

const deleteFollow = `-- name: DeleteFollow :exec
DELETE FROM follower
WHERE (from_follow = $1 AND to_follow = $2) OR (from_follow = $2 AND to_follow = $1)
`

type DeleteFollowParams struct {
	FromFollow int64 `json:"from_follow"`
	ToFollow   int64 `json:"to_follow"`
}

func (q *Queries) DeleteFollow(ctx context.Context, arg DeleteFollowParams) error {
	_, err := q.db.Exec(ctx, deleteFollow, arg.FromFollow, arg.ToFollow)
	return err
}

const getFollowStatus = `-- name: GetFollowStatus :one
SELECT id, from_follow, to_follow, status FROM follower
WHERE from_follow = $1 AND to_follow = $2
`

type GetFollowStatusParams struct {
	FromFollow int64 `json:"from_follow"`
	ToFollow   int64 `json:"to_follow"`
}

func (q *Queries) GetFollowStatus(ctx context.Context, arg GetFollowStatusParams) (Follower, error) {
	row := q.db.QueryRow(ctx, getFollowStatus, arg.FromFollow, arg.ToFollow)
	var i Follower
	err := row.Scan(
		&i.ID,
		&i.FromFollow,
		&i.ToFollow,
		&i.Status,
	)
	return i, err
}

const getYourFollow = `-- name: GetYourFollow :many
SELECT to_follow FROM follower
WHERE from_follow = $1 AND status = 'pending'
ORDER BY id DESC
LIMIT $2
OFFSET $3
`

type GetYourFollowParams struct {
	FromFollow int64 `json:"from_follow"`
	Limit      int32 `json:"limit"`
	Offset     int32 `json:"offset"`
}

func (q *Queries) GetYourFollow(ctx context.Context, arg GetYourFollowParams) ([]int64, error) {
	rows, err := q.db.Query(ctx, getYourFollow, arg.FromFollow, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var to_follow int64
		if err := rows.Scan(&to_follow); err != nil {
			return nil, err
		}
		items = append(items, to_follow)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getYourFollower = `-- name: GetYourFollower :many
SELECT to_follow FROM follower
WHERE from_follow = $1 AND status = 'accepted'
ORDER BY id DESC
LIMIT $2
OFFSET $3
`

type GetYourFollowerParams struct {
	FromFollow int64 `json:"from_follow"`
	Limit      int32 `json:"limit"`
	Offset     int32 `json:"offset"`
}

func (q *Queries) GetYourFollower(ctx context.Context, arg GetYourFollowerParams) ([]int64, error) {
	rows, err := q.db.Query(ctx, getYourFollower, arg.FromFollow, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var to_follow int64
		if err := rows.Scan(&to_follow); err != nil {
			return nil, err
		}
		items = append(items, to_follow)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getYourFriend = `-- name: GetYourFriend :many
SELECT to_follow FROM follower
WHERE from_follow = $1 AND status = 'friend'
ORDER BY id DESC
LIMIT $2
OFFSET $3
`

type GetYourFriendParams struct {
	FromFollow int64 `json:"from_follow"`
	Limit      int32 `json:"limit"`
	Offset     int32 `json:"offset"`
}

func (q *Queries) GetYourFriend(ctx context.Context, arg GetYourFriendParams) ([]int64, error) {
	rows, err := q.db.Query(ctx, getYourFriend, arg.FromFollow, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var to_follow int64
		if err := rows.Scan(&to_follow); err != nil {
			return nil, err
		}
		items = append(items, to_follow)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateFriend = `-- name: UpdateFriend :exec
UPDATE follower SET status = 'friend'
WHERE (from_follow = $1 AND to_follow = $2) OR (from_follow = $2 AND to_follow = $1)
`

type UpdateFriendParams struct {
	FromFollow int64 `json:"from_follow"`
	ToFollow   int64 `json:"to_follow"`
}

func (q *Queries) UpdateFriend(ctx context.Context, arg UpdateFriendParams) error {
	_, err := q.db.Exec(ctx, updateFriend, arg.FromFollow, arg.ToFollow)
	return err
}
