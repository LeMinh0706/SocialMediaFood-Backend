// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: follow.sql

package db

import (
	"context"
)

const createFollow = `-- name: CreateFollow :one
INSERT INTO follower ( 
    from_follow,
    to_follow,
    status
) VALUES ($1, $2, $3)
RETURNING id, from_follow, to_follow, status
`

type CreateFollowParams struct {
	FromFollow int64  `json:"from_follow"`
	ToFollow   int64  `json:"to_follow"`
	Status     string `json:"status"`
}

func (q *Queries) CreateFollow(ctx context.Context, arg CreateFollowParams) (Follower, error) {
	row := q.db.QueryRow(ctx, createFollow, arg.FromFollow, arg.ToFollow, arg.Status)
	var i Follower
	err := row.Scan(
		&i.ID,
		&i.FromFollow,
		&i.ToFollow,
		&i.Status,
	)
	return i, err
}

const deleteFollow = `-- name: DeleteFollow :exec
DELETE FROM follower
WHERE (from_follow = $1 AND to_follow = $2) OR (from_follow = $2 AND to_follow = $1)
`

type DeleteFollowParams struct {
	FromFollow int64 `json:"from_follow"`
	ToFollow   int64 `json:"to_follow"`
}

func (q *Queries) DeleteFollow(ctx context.Context, arg DeleteFollowParams) error {
	_, err := q.db.Exec(ctx, deleteFollow, arg.FromFollow, arg.ToFollow)
	return err
}

const getFollowStatus = `-- name: GetFollowStatus :one
SELECT id, from_follow, to_follow, status FROM follower
WHERE from_follow = $1 AND to_follow = $2
`

type GetFollowStatusParams struct {
	FromFollow int64 `json:"from_follow"`
	ToFollow   int64 `json:"to_follow"`
}

func (q *Queries) GetFollowStatus(ctx context.Context, arg GetFollowStatusParams) (Follower, error) {
	row := q.db.QueryRow(ctx, getFollowStatus, arg.FromFollow, arg.ToFollow)
	var i Follower
	err := row.Scan(
		&i.ID,
		&i.FromFollow,
		&i.ToFollow,
		&i.Status,
	)
	return i, err
}

const updateFriend = `-- name: UpdateFriend :exec
UPDATE follower SET status = 'friend'
WHERE (from_follow = $1 AND to_follow = $2) OR (from_follow = $2 AND to_follow = $1)
`

type UpdateFriendParams struct {
	FromFollow int64 `json:"from_follow"`
	ToFollow   int64 `json:"to_follow"`
}

func (q *Queries) UpdateFriend(ctx context.Context, arg UpdateFriendParams) error {
	_, err := q.db.Exec(ctx, updateFriend, arg.FromFollow, arg.ToFollow)
	return err
}
