// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: reset_password.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createRequestPassword = `-- name: CreateRequestPassword :one
INSERT INTO reset_password (
    id, 
    user_id,
    expires_at
) VALUES (
    $1, $2, $3
) RETURNING id, user_id, expires_at, is_active
`

type CreateRequestPasswordParams struct {
	ID        pgtype.UUID        `json:"id"`
	UserID    int64              `json:"user_id"`
	ExpiresAt pgtype.Timestamptz `json:"expires_at"`
}

func (q *Queries) CreateRequestPassword(ctx context.Context, arg CreateRequestPasswordParams) (ResetPassword, error) {
	row := q.db.QueryRow(ctx, createRequestPassword, arg.ID, arg.UserID, arg.ExpiresAt)
	var i ResetPassword
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ExpiresAt,
		&i.IsActive,
	)
	return i, err
}

const getCheckAction = `-- name: GetCheckAction :one
SELECT id, user_id, expires_at, is_active FROM reset_password
WHERE user_id = $1
ORDER BY expires_at DESC
LIMIT 1
`

func (q *Queries) GetCheckAction(ctx context.Context, userID int64) (ResetPassword, error) {
	row := q.db.QueryRow(ctx, getCheckAction, userID)
	var i ResetPassword
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ExpiresAt,
		&i.IsActive,
	)
	return i, err
}

const getRequestByUUID = `-- name: GetRequestByUUID :one
SELECT id, user_id, expires_at, is_active FROM reset_password 
WHERE id = $1
`

func (q *Queries) GetRequestByUUID(ctx context.Context, id pgtype.UUID) (ResetPassword, error) {
	row := q.db.QueryRow(ctx, getRequestByUUID, id)
	var i ResetPassword
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ExpiresAt,
		&i.IsActive,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username FROM users
WHERE email = $1
LIMIT 1
`

type GetUserByEmailRow struct {
	ID       int64  `json:"id"`
	Username string `json:"username"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email pgtype.Text) (GetUserByEmailRow, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(&i.ID, &i.Username)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, email FROM users
WHERE id = $1
LIMIT 1
`

type GetUserByIdRow struct {
	ID       int64       `json:"id"`
	Username string      `json:"username"`
	Email    pgtype.Text `json:"email"`
}

func (q *Queries) GetUserById(ctx context.Context, id int64) (GetUserByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(&i.ID, &i.Username, &i.Email)
	return i, err
}

const updateActive = `-- name: UpdateActive :exec
UPDATE reset_password SET is_active = TRUE
WHERE id = $1
`

func (q *Queries) UpdateActive(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, updateActive, id)
	return err
}

const updatePassword = `-- name: UpdatePassword :one
UPDATE users SET hash_password = $2
WHERE id = $1 
RETURNING id, created_at
`

type UpdatePasswordParams struct {
	ID           int64  `json:"id"`
	HashPassword string `json:"hash_password"`
}

type UpdatePasswordRow struct {
	ID        int64              `json:"id"`
	CreatedAt pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) (UpdatePasswordRow, error) {
	row := q.db.QueryRow(ctx, updatePassword, arg.ID, arg.HashPassword)
	var i UpdatePasswordRow
	err := row.Scan(&i.ID, &i.CreatedAt)
	return i, err
}
