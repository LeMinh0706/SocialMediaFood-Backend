// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: menu.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addToMenu = `-- name: AddToMenu :one
INSERT INTO menu (
    account_id,
    dish_name,
    quantity,
    price,
    img
)VALUES(
    $1, $2, $3, $4, $5
) RETURNING id, account_id, dish_name, quantity, price, img, is_delete
`

type AddToMenuParams struct {
	AccountID pgtype.Int8    `json:"account_id"`
	DishName  pgtype.Text    `json:"dish_name"`
	Quantity  pgtype.Int4    `json:"quantity"`
	Price     pgtype.Numeric `json:"price"`
	Img       pgtype.Text    `json:"img"`
}

func (q *Queries) AddToMenu(ctx context.Context, arg AddToMenuParams) (Menu, error) {
	row := q.db.QueryRow(ctx, addToMenu,
		arg.AccountID,
		arg.DishName,
		arg.Quantity,
		arg.Price,
		arg.Img,
	)
	var i Menu
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.DishName,
		&i.Quantity,
		&i.Price,
		&i.Img,
		&i.IsDelete,
	)
	return i, err
}

const deleteFood = `-- name: DeleteFood :exec
Update menu 
SET is_delete = TRUE
WHERE id = $1
`

func (q *Queries) DeleteFood(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteFood, id)
	return err
}

const getDish = `-- name: GetDish :one
SELECT id, dish_name, quantity, price, img 
FROM menu
WHERE account_id = $1
LIMIT 1
`

type GetDishRow struct {
	ID       int64          `json:"id"`
	DishName pgtype.Text    `json:"dish_name"`
	Quantity pgtype.Int4    `json:"quantity"`
	Price    pgtype.Numeric `json:"price"`
	Img      pgtype.Text    `json:"img"`
}

func (q *Queries) GetDish(ctx context.Context, accountID pgtype.Int8) (GetDishRow, error) {
	row := q.db.QueryRow(ctx, getDish, accountID)
	var i GetDishRow
	err := row.Scan(
		&i.ID,
		&i.DishName,
		&i.Quantity,
		&i.Price,
		&i.Img,
	)
	return i, err
}

const getMenu = `-- name: GetMenu :many
SELECT id, dish_name, quantity, price, img 
FROM menu
WHERE account_id = $1 AND is_delete != TRUE
LIMIT $2
OFFSET $3
`

type GetMenuParams struct {
	AccountID pgtype.Int8 `json:"account_id"`
	Limit     int32       `json:"limit"`
	Offset    int32       `json:"offset"`
}

type GetMenuRow struct {
	ID       int64          `json:"id"`
	DishName pgtype.Text    `json:"dish_name"`
	Quantity pgtype.Int4    `json:"quantity"`
	Price    pgtype.Numeric `json:"price"`
	Img      pgtype.Text    `json:"img"`
}

func (q *Queries) GetMenu(ctx context.Context, arg GetMenuParams) ([]GetMenuRow, error) {
	rows, err := q.db.Query(ctx, getMenu, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetMenuRow{}
	for rows.Next() {
		var i GetMenuRow
		if err := rows.Scan(
			&i.ID,
			&i.DishName,
			&i.Quantity,
			&i.Price,
			&i.Img,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const ownerUpdateQuanity = `-- name: OwnerUpdateQuanity :one
UPDATE menu
SET quantity = $2
WHERE id = $1
RETURNING id, account_id, dish_name, quantity, price, img, is_delete
`

type OwnerUpdateQuanityParams struct {
	ID       int64       `json:"id"`
	Quantity pgtype.Int4 `json:"quantity"`
}

func (q *Queries) OwnerUpdateQuanity(ctx context.Context, arg OwnerUpdateQuanityParams) (Menu, error) {
	row := q.db.QueryRow(ctx, ownerUpdateQuanity, arg.ID, arg.Quantity)
	var i Menu
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.DishName,
		&i.Quantity,
		&i.Price,
		&i.Img,
		&i.IsDelete,
	)
	return i, err
}

const updateQuanity = `-- name: UpdateQuanity :one
UPDATE menu
SET quantity = quantity + $2
WHERE id = $1
RETURNING id, account_id, dish_name, quantity, price, img, is_delete
`

type UpdateQuanityParams struct {
	ID       int64       `json:"id"`
	Quantity pgtype.Int4 `json:"quantity"`
}

func (q *Queries) UpdateQuanity(ctx context.Context, arg UpdateQuanityParams) (Menu, error) {
	row := q.db.QueryRow(ctx, updateQuanity, arg.ID, arg.Quantity)
	var i Menu
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.DishName,
		&i.Quantity,
		&i.Price,
		&i.Img,
		&i.IsDelete,
	)
	return i, err
}
