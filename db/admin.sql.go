// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: admin.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addUpgradePrice = `-- name: AddUpgradePrice :one
INSERT INTO upgrade_price (
    price 
)VALUES ($1)
RETURNING id, price, created_at
`

func (q *Queries) AddUpgradePrice(ctx context.Context, price pgtype.Numeric) (UpgradePrice, error) {
	row := q.db.QueryRow(ctx, addUpgradePrice, price)
	var i UpgradePrice
	err := row.Scan(&i.ID, &i.Price, &i.CreatedAt)
	return i, err
}

const getLastPrice = `-- name: GetLastPrice :one
SELECT id, price, created_at FROM upgrade_price
ORDER BY id DESC
LIMIT 1
`

func (q *Queries) GetLastPrice(ctx context.Context) (UpgradePrice, error) {
	row := q.db.QueryRow(ctx, getLastPrice)
	var i UpgradePrice
	err := row.Scan(&i.ID, &i.Price, &i.CreatedAt)
	return i, err
}

const getListUpgradePrice = `-- name: GetListUpgradePrice :many
SELECT id, price, created_at FROM upgrade_price
LIMIT $1
OFFSET $2
`

type GetListUpgradePriceParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetListUpgradePrice(ctx context.Context, arg GetListUpgradePriceParams) ([]UpgradePrice, error) {
	rows, err := q.db.Query(ctx, getListUpgradePrice, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UpgradePrice{}
	for rows.Next() {
		var i UpgradePrice
		if err := rows.Scan(&i.ID, &i.Price, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUpgradeQueue = `-- name: GetUpgradeQueue :many
SELECT account_id FROM upgrade_queue
WHERE state = 'pending'
ORDER BY created_at
LIMIT $1
OFFSET $2
`

type GetUpgradeQueueParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetUpgradeQueue(ctx context.Context, arg GetUpgradeQueueParams) ([]int64, error) {
	rows, err := q.db.Query(ctx, getUpgradeQueue, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var account_id int64
		if err := rows.Scan(&account_id); err != nil {
			return nil, err
		}
		items = append(items, account_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isAdmin = `-- name: IsAdmin :one
SELECT role_id FROM accounts
WHERE user_id = $1
ORDER BY id ASC
LIMIT 1
`

func (q *Queries) IsAdmin(ctx context.Context, userID int64) (int32, error) {
	row := q.db.QueryRow(ctx, isAdmin, userID)
	var role_id int32
	err := row.Scan(&role_id)
	return role_id, err
}

const upgradeOwner = `-- name: UpgradeOwner :exec
UPDATE accounts SET is_upgrade = TRUE AND role_id = 2
WHERE id = $1
`

func (q *Queries) UpgradeOwner(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, upgradeOwner, id)
	return err
}

const upgradeStateQueue = `-- name: UpgradeStateQueue :exec
UPDATE upgrade_queue SET state = 'paid'
WHERE account_id = $1
`

func (q *Queries) UpgradeStateQueue(ctx context.Context, accountID int64) error {
	_, err := q.db.Exec(ctx, upgradeStateQueue, accountID)
	return err
}
