// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: react.sql

package db

import (
	"context"
)

const createReact = `-- name: CreateReact :one
INSERT INTO react_post (
    account_id,
    post_id, 
    state
) VALUES (
    $1, $2, $3
) RETURNING id, account_id, post_id, state
`

type CreateReactParams struct {
	AccountID int64 `json:"account_id"`
	PostID    int64 `json:"post_id"`
	State     int32 `json:"state"`
}

func (q *Queries) CreateReact(ctx context.Context, arg CreateReactParams) (ReactPost, error) {
	row := q.db.QueryRow(ctx, createReact, arg.AccountID, arg.PostID, arg.State)
	var i ReactPost
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.PostID,
		&i.State,
	)
	return i, err
}

const getFavorite = `-- name: GetFavorite :many
SELECT post_id FROM react_post
WHERE account_id = $1
ORDER BY id DESC
LIMIT $2
OFFSET $3
`

type GetFavoriteParams struct {
	AccountID int64 `json:"account_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) GetFavorite(ctx context.Context, arg GetFavoriteParams) ([]int64, error) {
	rows, err := q.db.Query(ctx, getFavorite, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var post_id int64
		if err := rows.Scan(&post_id); err != nil {
			return nil, err
		}
		items = append(items, post_id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getReactPost = `-- name: GetReactPost :many
SELECT id, account_id, post_id, state FROM react_post
WHERE post_id = $1
`

func (q *Queries) GetReactPost(ctx context.Context, postID int64) ([]ReactPost, error) {
	rows, err := q.db.Query(ctx, getReactPost, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ReactPost{}
	for rows.Next() {
		var i ReactPost
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.PostID,
			&i.State,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
