// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: post.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const countComment = `-- name: CountComment :one
SELECT count(id) FROM posts
WHERE post_top_id = $1
`

func (q *Queries) CountComment(ctx context.Context, postTopID pgtype.Int8) (int64, error) {
	row := q.db.QueryRow(ctx, countComment, postTopID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createComment = `-- name: CreateComment :one
INSERT INTO posts (
    post_type_id,
    account_id,
    post_top_id,
    description
) VALUES (
    9, $1, $2, $3 
) RETURNING id, post_type_id, account_id, post_top_id, description, created_at
`

type CreateCommentParams struct {
	AccountID   int64       `json:"account_id"`
	PostTopID   pgtype.Int8 `json:"post_top_id"`
	Description pgtype.Text `json:"description"`
}

type CreateCommentRow struct {
	ID          int64              `json:"id"`
	PostTypeID  int32              `json:"post_type_id"`
	AccountID   int64              `json:"account_id"`
	PostTopID   pgtype.Int8        `json:"post_top_id"`
	Description pgtype.Text        `json:"description"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (CreateCommentRow, error) {
	row := q.db.QueryRow(ctx, createComment, arg.AccountID, arg.PostTopID, arg.Description)
	var i CreateCommentRow
	err := row.Scan(
		&i.ID,
		&i.PostTypeID,
		&i.AccountID,
		&i.PostTopID,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
    post_type_id,
    account_id,
    description,
    location
) VALUES (
    $1, $2, $3, ST_GeomFromText($4,4326)
) RETURNING id, post_type_id, account_id, description, ST_X(location::geometry) AS lng, ST_Y(location::geometry) AS lat, created_at
`

type CreatePostParams struct {
	PostTypeID     int32       `json:"post_type_id"`
	AccountID      int64       `json:"account_id"`
	Description    pgtype.Text `json:"description"`
	StGeomfromtext interface{} `json:"st_geomfromtext"`
}

type CreatePostRow struct {
	ID          int64              `json:"id"`
	PostTypeID  int32              `json:"post_type_id"`
	AccountID   int64              `json:"account_id"`
	Description pgtype.Text        `json:"description"`
	Lng         interface{}        `json:"lng"`
	Lat         interface{}        `json:"lat"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (CreatePostRow, error) {
	row := q.db.QueryRow(ctx, createPost,
		arg.PostTypeID,
		arg.AccountID,
		arg.Description,
		arg.StGeomfromtext,
	)
	var i CreatePostRow
	err := row.Scan(
		&i.ID,
		&i.PostTypeID,
		&i.AccountID,
		&i.Description,
		&i.Lng,
		&i.Lat,
		&i.CreatedAt,
	)
	return i, err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM posts 
WHERE id = $1
`

func (q *Queries) DeleteComment(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteComment, id)
	return err
}

const deletePost = `-- name: DeletePost :exec
UPDATE posts SET is_deleted = TRUE
WHERE id = $1
`

func (q *Queries) DeletePost(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deletePost, id)
	return err
}

const getComment = `-- name: GetComment :one
SELECT id, post_type_id, account_id, post_top_id, description, created_at 
FROM posts
WHERE id = $1
`

type GetCommentRow struct {
	ID          int64              `json:"id"`
	PostTypeID  int32              `json:"post_type_id"`
	AccountID   int64              `json:"account_id"`
	PostTopID   pgtype.Int8        `json:"post_top_id"`
	Description pgtype.Text        `json:"description"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) GetComment(ctx context.Context, id int64) (GetCommentRow, error) {
	row := q.db.QueryRow(ctx, getComment, id)
	var i GetCommentRow
	err := row.Scan(
		&i.ID,
		&i.PostTypeID,
		&i.AccountID,
		&i.PostTopID,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const getHomePagePost = `-- name: GetHomePagePost :many

WITH posts_in_range AS (
    SELECT p.id, p.account_id, p.created_at, f.status
    FROM posts p
    LEFT JOIN follower as f ON p.account_id = f.to_follow AND f.from_follow = $1
    WHERE (f.from_follow = $1 OR f.from_follow IS NULL) AND is_deleted != TRUE AND is_banned != TRUE AND post_type_id != 9
    ORDER BY p.created_at DESC
    LIMIT $2 OFFSET $3
),
has_friend_posts AS (
    SELECT COUNT(*) AS friend_count
    FROM posts_in_range
    WHERE status IN ('friend','request') OR account_id = $1
)
SELECT p.id
FROM posts_in_range p, has_friend_posts h
ORDER BY 
    CASE
        WHEN p.account_id = $1 THEN 1
        WHEN h.friend_count > 0 AND p.status = 'friend' THEN 2
        WHEN h.friend_count > 0 AND p.status = 'request' THEN 3
        ELSE 4
    END,
    p.created_at DESC
`

type GetHomePagePostParams struct {
	AccountID int64 `json:"account_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

// GPT Make this :))))
func (q *Queries) GetHomePagePost(ctx context.Context, arg GetHomePagePostParams) ([]int64, error) {
	rows, err := q.db.Query(ctx, getHomePagePost, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListComment = `-- name: GetListComment :many

SELECT id
FROM posts
WHERE post_top_id = $1 AND post_type_id = 9  
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type GetListCommentParams struct {
	PostTopID pgtype.Int8 `json:"post_top_id"`
	Limit     int32       `json:"limit"`
	Offset    int32       `json:"offset"`
}

// comment
func (q *Queries) GetListComment(ctx context.Context, arg GetListCommentParams) ([]int64, error) {
	rows, err := q.db.Query(ctx, getListComment, arg.PostTopID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getListPost = `-- name: GetListPost :many
SELECT id
FROM posts
WHERE is_deleted != TRUE AND is_banned != TRUE AND post_type_id != 9
ORDER BY created_at DESC
LIMIT $1 
OFFSET $2
`

type GetListPostParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetListPost(ctx context.Context, arg GetListPostParams) ([]int64, error) {
	rows, err := q.db.Query(ctx, getListPost, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPersonPost = `-- name: GetPersonPost :many
SELECT id FROM posts 
WHERE account_id = $1 AND is_deleted != TRUE AND is_banned != TRUE AND post_type_id != 9
ORDER BY created_at DESC
LIMIT $2
OFFSET $3
`

type GetPersonPostParams struct {
	AccountID int64 `json:"account_id"`
	Limit     int32 `json:"limit"`
	Offset    int32 `json:"offset"`
}

func (q *Queries) GetPersonPost(ctx context.Context, arg GetPersonPostParams) ([]int64, error) {
	rows, err := q.db.Query(ctx, getPersonPost, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPost = `-- name: GetPost :one
SELECT id, post_type_id, account_id, description, ST_X(location::geometry) AS lng, ST_Y(location::geometry) AS lat, created_at
FROM posts 
WHERE id = $1 AND is_deleted != TRUE AND is_banned != TRUE AND post_type_id != 9
`

type GetPostRow struct {
	ID          int64              `json:"id"`
	PostTypeID  int32              `json:"post_type_id"`
	AccountID   int64              `json:"account_id"`
	Description pgtype.Text        `json:"description"`
	Lng         interface{}        `json:"lng"`
	Lat         interface{}        `json:"lat"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) GetPost(ctx context.Context, id int64) (GetPostRow, error) {
	row := q.db.QueryRow(ctx, getPost, id)
	var i GetPostRow
	err := row.Scan(
		&i.ID,
		&i.PostTypeID,
		&i.AccountID,
		&i.Description,
		&i.Lng,
		&i.Lat,
		&i.CreatedAt,
	)
	return i, err
}

const getPostInLocate = `-- name: GetPostInLocate :many
SELECT id, post_type_id, account_id, description, ST_X(location::geometry) AS lng, ST_Y(location::geometry) AS lat, created_at
FROM posts
WHERE is_banned != TRUE 
AND is_deleted != TRUE
AND ST_DWithin(location, ST_SetSRID(ST_MakePoint($1, $2), 4326), $3)
`

type GetPostInLocateParams struct {
	StMakepoint   interface{} `json:"st_makepoint"`
	StMakepoint_2 interface{} `json:"st_makepoint_2"`
	StDwithin     interface{} `json:"st_dwithin"`
}

type GetPostInLocateRow struct {
	ID          int64              `json:"id"`
	PostTypeID  int32              `json:"post_type_id"`
	AccountID   int64              `json:"account_id"`
	Description pgtype.Text        `json:"description"`
	Lng         interface{}        `json:"lng"`
	Lat         interface{}        `json:"lat"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) GetPostInLocate(ctx context.Context, arg GetPostInLocateParams) ([]GetPostInLocateRow, error) {
	rows, err := q.db.Query(ctx, getPostInLocate, arg.StMakepoint, arg.StMakepoint_2, arg.StDwithin)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPostInLocateRow{}
	for rows.Next() {
		var i GetPostInLocateRow
		if err := rows.Scan(
			&i.ID,
			&i.PostTypeID,
			&i.AccountID,
			&i.Description,
			&i.Lng,
			&i.Lat,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateComment = `-- name: UpdateComment :one
UPDATE posts SET description = $2
WHERE id = $1
RETURNING id, post_type_id, account_id, post_top_id, description, created_at
`

type UpdateCommentParams struct {
	ID          int64       `json:"id"`
	Description pgtype.Text `json:"description"`
}

type UpdateCommentRow struct {
	ID          int64              `json:"id"`
	PostTypeID  int32              `json:"post_type_id"`
	AccountID   int64              `json:"account_id"`
	PostTopID   pgtype.Int8        `json:"post_top_id"`
	Description pgtype.Text        `json:"description"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) UpdateComment(ctx context.Context, arg UpdateCommentParams) (UpdateCommentRow, error) {
	row := q.db.QueryRow(ctx, updateComment, arg.ID, arg.Description)
	var i UpdateCommentRow
	err := row.Scan(
		&i.ID,
		&i.PostTypeID,
		&i.AccountID,
		&i.PostTopID,
		&i.Description,
		&i.CreatedAt,
	)
	return i, err
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts SET description = $2
WHERE id = $1
RETURNING id, post_type_id, account_id, description, ST_X(location::geometry) AS lng, ST_Y(location::geometry) AS lat, created_at
`

type UpdatePostParams struct {
	ID          int64       `json:"id"`
	Description pgtype.Text `json:"description"`
}

type UpdatePostRow struct {
	ID          int64              `json:"id"`
	PostTypeID  int32              `json:"post_type_id"`
	AccountID   int64              `json:"account_id"`
	Description pgtype.Text        `json:"description"`
	Lng         interface{}        `json:"lng"`
	Lat         interface{}        `json:"lat"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (UpdatePostRow, error) {
	row := q.db.QueryRow(ctx, updatePost, arg.ID, arg.Description)
	var i UpdatePostRow
	err := row.Scan(
		&i.ID,
		&i.PostTypeID,
		&i.AccountID,
		&i.Description,
		&i.Lng,
		&i.Lat,
		&i.CreatedAt,
	)
	return i, err
}
