// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: post.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createComment = `-- name: CreateComment :one
INSERT INTO posts (
    post_type_id,
    account_id,
    post_top_id,
    description
) VALUES (
    9, $1, $2, $3 
) RETURNING id, post_type_id, account_id, post_top_id, description, created_at, location, is_banned, is_deleted
`

type CreateCommentParams struct {
	AccountID   int64       `json:"account_id"`
	PostTopID   pgtype.Int8 `json:"post_top_id"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Post, error) {
	row := q.db.QueryRow(ctx, createComment, arg.AccountID, arg.PostTopID, arg.Description)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.PostTypeID,
		&i.AccountID,
		&i.PostTopID,
		&i.Description,
		&i.CreatedAt,
		&i.Location,
		&i.IsBanned,
		&i.IsDeleted,
	)
	return i, err
}

const createPost = `-- name: CreatePost :one
INSERT INTO posts (
    post_type_id,
    account_id,
    description,
    location
) VALUES (
    $1, $2, $3, ST_GeomFromText($4,4326)
) RETURNING id, post_type_id, account_id, description, ST_X(location::geometry) AS lng, ST_Y(location::geometry) AS lat, created_at
`

type CreatePostParams struct {
	PostTypeID     int32       `json:"post_type_id"`
	AccountID      int64       `json:"account_id"`
	Description    pgtype.Text `json:"description"`
	StGeomfromtext interface{} `json:"st_geomfromtext"`
}

type CreatePostRow struct {
	ID          int64              `json:"id"`
	PostTypeID  int32              `json:"post_type_id"`
	AccountID   int64              `json:"account_id"`
	Description pgtype.Text        `json:"description"`
	Lng         interface{}        `json:"lng"`
	Lat         interface{}        `json:"lat"`
	CreatedAt   pgtype.Timestamptz `json:"created_at"`
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (CreatePostRow, error) {
	row := q.db.QueryRow(ctx, createPost,
		arg.PostTypeID,
		arg.AccountID,
		arg.Description,
		arg.StGeomfromtext,
	)
	var i CreatePostRow
	err := row.Scan(
		&i.ID,
		&i.PostTypeID,
		&i.AccountID,
		&i.Description,
		&i.Lng,
		&i.Lat,
		&i.CreatedAt,
	)
	return i, err
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts SET description = $2
WHERE id = $1
RETURNING id, post_type_id, account_id, post_top_id, description, created_at, location, is_banned, is_deleted
`

type UpdatePostParams struct {
	ID          int64       `json:"id"`
	Description pgtype.Text `json:"description"`
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (Post, error) {
	row := q.db.QueryRow(ctx, updatePost, arg.ID, arg.Description)
	var i Post
	err := row.Scan(
		&i.ID,
		&i.PostTypeID,
		&i.AccountID,
		&i.PostTopID,
		&i.Description,
		&i.CreatedAt,
		&i.Location,
		&i.IsBanned,
		&i.IsDeleted,
	)
	return i, err
}
