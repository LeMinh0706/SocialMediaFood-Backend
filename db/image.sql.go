// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: image.sql

package db

import (
	"context"
)

const addImagePost = `-- name: AddImagePost :one
INSERT INTO post_image (
    url_image,
    post_id
) VALUES (
    $1, $2
) RETURNING id, url_image, post_id
`

type AddImagePostParams struct {
	UrlImage string `json:"url_image"`
	PostID   int64  `json:"post_id"`
}

func (q *Queries) AddImagePost(ctx context.Context, arg AddImagePostParams) (PostImage, error) {
	row := q.db.QueryRow(ctx, addImagePost, arg.UrlImage, arg.PostID)
	var i PostImage
	err := row.Scan(&i.ID, &i.UrlImage, &i.PostID)
	return i, err
}

const deleteImagePost = `-- name: DeleteImagePost :exec
DELETE FROM post_image
WHERE id = $1
`

func (q *Queries) DeleteImagePost(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteImagePost, id)
	return err
}

const getImage = `-- name: GetImage :one
SELECT id, url_image, post_id FROM post_image
WHERE id = $1
`

func (q *Queries) GetImage(ctx context.Context, id int64) (PostImage, error) {
	row := q.db.QueryRow(ctx, getImage, id)
	var i PostImage
	err := row.Scan(&i.ID, &i.UrlImage, &i.PostID)
	return i, err
}

const getImageComment = `-- name: GetImageComment :one
SELECT id, url_image, post_id FROM post_image
WHERE post_id = $1
ORDER BY id DESC
LIMIT 1
`

func (q *Queries) GetImageComment(ctx context.Context, postID int64) (PostImage, error) {
	row := q.db.QueryRow(ctx, getImageComment, postID)
	var i PostImage
	err := row.Scan(&i.ID, &i.UrlImage, &i.PostID)
	return i, err
}

const getImagePost = `-- name: GetImagePost :many
SELECT id, url_image, post_id FROM post_image 
WHERE post_id = $1
`

func (q *Queries) GetImagePost(ctx context.Context, postID int64) ([]PostImage, error) {
	rows, err := q.db.Query(ctx, getImagePost, postID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []PostImage{}
	for rows.Next() {
		var i PostImage
		if err := rows.Scan(&i.ID, &i.UrlImage, &i.PostID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateImagePost = `-- name: UpdateImagePost :one
UPDATE post_image SET url_image = $2
WHERE post_id = $1
RETURNING id, url_image, post_id
`

type UpdateImagePostParams struct {
	PostID   int64  `json:"post_id"`
	UrlImage string `json:"url_image"`
}

func (q *Queries) UpdateImagePost(ctx context.Context, arg UpdateImagePostParams) (PostImage, error) {
	row := q.db.QueryRow(ctx, updateImagePost, arg.PostID, arg.UrlImage)
	var i PostImage
	err := row.Scan(&i.ID, &i.UrlImage, &i.PostID)
	return i, err
}
