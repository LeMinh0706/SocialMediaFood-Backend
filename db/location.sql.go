// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: location.sql

package db

import (
	"context"
)

const createOwnerBranch = `-- name: CreateOwnerBranch :one
INSERT INTO locate (
    account_id,
    location
) VALUES (
    $1, ST_GeomFromText($2,4326)
) RETURNING id, account_id, ST_X(location::geometry) AS lng, ST_Y(location::geometry) AS lat
`

type CreateOwnerBranchParams struct {
	AccountID      int64       `json:"account_id"`
	StGeomfromtext interface{} `json:"st_geomfromtext"`
}

type CreateOwnerBranchRow struct {
	ID        int64       `json:"id"`
	AccountID int64       `json:"account_id"`
	Lng       interface{} `json:"lng"`
	Lat       interface{} `json:"lat"`
}

func (q *Queries) CreateOwnerBranch(ctx context.Context, arg CreateOwnerBranchParams) (CreateOwnerBranchRow, error) {
	row := q.db.QueryRow(ctx, createOwnerBranch, arg.AccountID, arg.StGeomfromtext)
	var i CreateOwnerBranchRow
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Lng,
		&i.Lat,
	)
	return i, err
}

const getLocation = `-- name: GetLocation :many
SELECT id, ST_X(location::geometry) AS lng, ST_Y(location::geometry) AS lat
FROM locate
WHERE account_id = $1
`

type GetLocationRow struct {
	ID  int64       `json:"id"`
	Lng interface{} `json:"lng"`
	Lat interface{} `json:"lat"`
}

func (q *Queries) GetLocation(ctx context.Context, accountID int64) ([]GetLocationRow, error) {
	rows, err := q.db.Query(ctx, getLocation, accountID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetLocationRow{}
	for rows.Next() {
		var i GetLocationRow
		if err := rows.Scan(&i.ID, &i.Lng, &i.Lat); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
