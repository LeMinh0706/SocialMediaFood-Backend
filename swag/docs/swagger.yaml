basePath: /api
definitions:
  account.AccountResponse:
    properties:
      address:
        type: string
      country:
        type: string
      fullname:
        type: string
      gender:
        type: integer
      id:
        type: integer
      is_upgrade:
        type: boolean
      language:
        type: string
      url_avatar:
        type: string
      url_background_profile:
        type: string
      user_id:
        type: integer
    type: object
  comment.CommentResponse:
    properties:
      account:
        $ref: '#/definitions/db.GetAccountByIdRow'
      account_id:
        type: integer
      description:
        type: string
      id:
        type: integer
      image:
        $ref: '#/definitions/db.PostImage'
      post_top_id:
        type: integer
      post_type_id:
        type: integer
    type: object
  db.DeleteFollowParams:
    properties:
      from_follow:
        type: integer
      to_follow:
        type: integer
    type: object
  db.DeleteReactParams:
    properties:
      account_id:
        type: integer
      post_id:
        type: integer
    type: object
  db.GetAccountByIdRow:
    properties:
      fullname:
        type: string
      id:
        type: integer
      role_id:
        type: integer
      url_avatar:
        type: string
      url_background_profile:
        type: string
      user_id:
        type: integer
    type: object
  db.GetFollowStatusRow:
    properties:
      from_follow:
        type: integer
      status:
        type: string
      to_follow:
        type: integer
    type: object
  db.PostImage:
    properties:
      id:
        type: integer
      post_id:
        type: integer
      url_image:
        type: string
    type: object
  db.ReactPost:
    properties:
      account_id:
        type: integer
      id:
        type: integer
      post_id:
        type: integer
      state:
        type: integer
    type: object
  db.RegisterRequest:
    properties:
      email:
        type: string
      fullname:
        maxLength: 32
        minLength: 6
        type: string
      gender:
        maximum: 1
        minimum: 0
        type: integer
      password:
        minLength: 8
        type: string
      username:
        maxLength: 16
        minLength: 6
        type: string
    required:
    - fullname
    - password
    - username
    type: object
  db.UpdateFriendParams:
    properties:
      from_follow:
        type: integer
      to_follow:
        type: integer
    type: object
  db.UpdateStateParams:
    properties:
      account_id:
        type: integer
      post_id:
        type: integer
      state:
        type: integer
    type: object
  follower.AccountFollowResponse:
    properties:
      account:
        $ref: '#/definitions/db.GetAccountByIdRow'
      status:
        type: string
    type: object
  follower.CreateFollowRequest:
    properties:
      from_id:
        type: integer
      to_id:
        type: integer
    type: object
  follower.FollowResponse:
    properties:
      from_follow:
        $ref: '#/definitions/follower.AccountFollowResponse'
      to_follow:
        $ref: '#/definitions/follower.AccountFollowResponse'
    type: object
  follower.ListFollow:
    properties:
      account:
        items:
          $ref: '#/definitions/db.GetAccountByIdRow'
        type: array
      total:
        type: integer
    type: object
  post.PostResponse:
    properties:
      account:
        $ref: '#/definitions/db.GetAccountByIdRow'
      account_id:
        type: integer
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      images:
        items:
          $ref: '#/definitions/db.PostImage'
        type: array
      lat: {}
      lng: {}
      post_type_id:
        type: integer
      total_comment:
        type: integer
      total_like:
        type: integer
    type: object
  react.ListReactResponse:
    properties:
      react:
        items:
          $ref: '#/definitions/react.ReactResponse'
        type: array
      total:
        type: integer
    type: object
  react.ReactRequest:
    properties:
      account_id:
        type: integer
      post_id:
        type: integer
    type: object
  react.ReactResponse:
    properties:
      account:
        $ref: '#/definitions/db.GetAccountByIdRow'
      id:
        type: integer
      post_id:
        type: integer
      state:
        type: integer
    type: object
  response.ErrSwaggerJson:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
    type: object
  user.LoginRequest:
    properties:
      password:
        example: kocanpass
        minLength: 8
        type: string
      username:
        example: HiroPhent
        maxLength: 16
        minLength: 6
        type: string
    required:
    - password
    - username
    type: object
  user.LoginResponse:
    properties:
      access_token:
        type: string
    type: object
  user.RegisterResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      username:
        type: string
    required:
    - username
    type: object
host: localhost:8070
info:
  contact: {}
  description: This is SocialFood Swagger.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Foodioo Documentations
  version: "1.0"
paths:
  /accounts/{id}:
    get:
      consumes:
      - application/json
      description: To see the account, fetch profile
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/account.AccountResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrSwaggerJson'
      security:
      - BearerAuth: []
      summary: Profile api
      tags:
      - Accounts
  /accounts/me:
    get:
      consumes:
      - application/json
      description: All your account is in here ->
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/account.AccountResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrSwaggerJson'
      security:
      - BearerAuth: []
      summary: It's you
      tags:
      - Accounts
  /comments:
    get:
      consumes:
      - application/json
      description: Get list post with post_top_id, page and page size (Limit-Offset)
      parameters:
      - description: PostID
        in: query
        name: post_id
        required: true
        type: integer
      - description: Page
        in: query
        name: page
        required: true
        type: integer
      - description: Page Size
        in: query
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/comment.CommentResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrSwaggerJson'
      security:
      - BearerAuth: []
      summary: Get list post
      tags:
      - Comments
    post:
      consumes:
      - multipart/form-data
      description: Create comment
      parameters:
      - description: PostID
        in: formData
        name: post_id
        required: true
        type: string
      - description: Description
        in: formData
        name: description
        required: true
        type: string
      - description: AccountID
        in: formData
        name: account_id
        required: true
        type: string
      - description: Image comment
        in: formData
        name: image
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/comment.CommentResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrSwaggerJson'
      security:
      - BearerAuth: []
      summary: Create comment
      tags:
      - Comments
    put:
      consumes:
      - multipart/form-data
      description: Create comment
      parameters:
      - description: CommentID
        in: formData
        name: id
        required: true
        type: string
      - description: Description
        in: formData
        name: description
        required: true
        type: string
      - description: Image comment
        in: formData
        name: image
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/comment.CommentResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrSwaggerJson'
      security:
      - BearerAuth: []
      summary: Create comment
      tags:
      - Comments
  /comments/{id}:
    delete:
      consumes:
      - application/json
      description: Delete comment
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No content
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrSwaggerJson'
      security:
      - BearerAuth: []
      summary: Delete Comment
      tags:
      - Comments
  /follower:
    delete:
      consumes:
      - application/json
      description: You will unfollow to another and we will delete two record in db
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/db.DeleteFollowParams'
      produces:
      - application/json
      responses:
        "204":
          description: No content
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrSwaggerJson'
      security:
      - BearerAuth: []
      summary: Delete your follow
      tags:
      - Follower
    get:
      consumes:
      - application/json
      description: 'Get list follower from user with 3 types: "accept", "request",
        "friend"'
      parameters:
      - description: Status
        in: query
        name: status
        required: true
        type: string
      - description: From Account
        in: query
        name: from_id
        required: true
        type: integer
      - description: Page
        in: query
        name: page
        required: true
        type: integer
      - description: Page Size
        in: query
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/follower.ListFollow'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrSwaggerJson'
      security:
      - BearerAuth: []
      summary: Get list Follower
      tags:
      - Follower
    post:
      consumes:
      - application/json
      description: Create follow for to another user
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/follower.CreateFollowRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/follower.FollowResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrSwaggerJson'
      security:
      - BearerAuth: []
      summary: Create follow
      tags:
      - Follower
    put:
      consumes:
      - application/json
      description: Make you guy become a friend
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/db.UpdateFriendParams'
      produces:
      - application/json
      responses:
        "201":
          description: no content
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrSwaggerJson'
      security:
      - BearerAuth: []
      summary: Update Friend
      tags:
      - Follower
  /follower/status:
    get:
      consumes:
      - application/json
      description: To see the relationship from your to another
      parameters:
      - description: From your
        in: query
        name: from_id
        required: true
        type: integer
      - description: To person
        in: query
        name: to_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.GetFollowStatusRow'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrSwaggerJson'
      security:
      - BearerAuth: []
      summary: Get status from your and the other
      tags:
      - Follower
  /posts:
    get:
      consumes:
      - application/json
      description: Get list post with page and page size (Limit-Offset)
      parameters:
      - description: Page
        in: query
        name: page
        required: true
        type: integer
      - description: Page Size
        in: query
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/post.PostResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrSwaggerJson'
      summary: Get list post
      tags:
      - Posts
    post:
      consumes:
      - multipart/form-data
      description: Create post
      parameters:
      - description: Description
        in: formData
        name: description
        type: string
      - description: Account ID
        in: formData
        name: account_id
        required: true
        type: string
      - description: Lng
        in: formData
        name: lng
        type: string
      - description: Lat
        in: formData
        name: lat
        type: string
      - collectionFormat: csv
        description: Images post
        in: formData
        items:
          type: file
        name: images
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/post.PostResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrSwaggerJson'
      security:
      - BearerAuth: []
      summary: Create post
      tags:
      - Posts
  /posts/{id}:
    put:
      consumes:
      - application/json
      description: Just update content post
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Description
        in: formData
        name: description
        type: string
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/post.PostResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrSwaggerJson'
      security:
      - BearerAuth: []
      summary: Update post
      tags:
      - Posts
  /posts/images/{id}:
    delete:
      consumes:
      - application/json
      description: Delete image when update post (maybe)
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No content
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrSwaggerJson'
      security:
      - BearerAuth: []
      summary: Delete Image
      tags:
      - Posts
  /posts/person:
    get:
      consumes:
      - application/json
      description: Get list post with account_id, page and page size (Limit-Offset)
      parameters:
      - description: Account ID
        in: query
        name: account_id
        required: true
        type: integer
      - description: Page
        in: query
        name: page
        required: true
        type: integer
      - description: Page Size
        in: query
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/post.PostResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrSwaggerJson'
      security:
      - BearerAuth: []
      summary: Get list post
      tags:
      - Posts
  /posts/soft-delete/{id}:
    post:
      consumes:
      - application/json
      description: Just Delete post
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No content
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrSwaggerJson'
      security:
      - BearerAuth: []
      summary: Delete post
      tags:
      - Posts
  /react:
    delete:
      consumes:
      - application/json
      description: Delete your reaction with on any post
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/db.DeleteReactParams'
      produces:
      - application/json
      responses:
        "204":
          description: No content
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrSwaggerJson'
      security:
      - BearerAuth: []
      summary: Unlike post
      tags:
      - React
    get:
      consumes:
      - application/json
      description: Get with post_id, to say have you liked this post
      parameters:
      - description: AccountID
        in: query
        name: account_id
        required: true
        type: integer
      - description: PostID
        in: query
        name: post_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/react.ReactResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrSwaggerJson'
      security:
      - BearerAuth: []
      summary: Get reactions
      tags:
      - React
    post:
      consumes:
      - application/json
      description: Create reaction for post
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/react.ReactRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/db.ReactPost'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrSwaggerJson'
      security:
      - BearerAuth: []
      summary: Create reacttion
      tags:
      - React
    put:
      consumes:
      - application/json
      description: Just change reaction type 1 for like, 2 for hearth, 3 for sad,
        4 for angry
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/db.UpdateStateParams'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/db.ReactPost'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrSwaggerJson'
      security:
      - BearerAuth: []
      summary: Change reaction state
      tags:
      - React
  /react/post/{id}:
    get:
      consumes:
      - application/json
      description: Get list reactions with post_id, page and page size (Limit-Offset)
      parameters:
      - description: PostID
        in: path
        name: id
        required: true
        type: integer
      - description: Page
        in: query
        name: page
        required: true
        type: integer
      - description: Page Size
        in: query
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/react.ListReactResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrSwaggerJson'
      security:
      - BearerAuth: []
      summary: Get list reactions
      tags:
      - React
  /users/login:
    post:
      consumes:
      - application/json
      description: Login to be more handsome
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/user.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.LoginResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrSwaggerJson'
      summary: Login user
      tags:
      - Users
  /users/register:
    post:
      consumes:
      - application/json
      description: Join with us
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/db.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/user.RegisterResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrSwaggerJson'
      summary: Register user
      tags:
      - Users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
