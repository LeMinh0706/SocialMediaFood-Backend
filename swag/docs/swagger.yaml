basePath: /api
definitions:
  db.PostImage:
    properties:
      id:
        type: integer
      post_id:
        type: integer
      url_image:
        type: string
    type: object
  db.RegisterRequest:
    properties:
      email:
        type: string
      fullname:
        maxLength: 32
        minLength: 6
        type: string
      gender:
        maximum: 1
        minimum: 0
        type: integer
      password:
        minLength: 8
        type: string
      username:
        maxLength: 16
        minLength: 6
        type: string
    required:
    - fullname
    - password
    - username
    type: object
  models.AccountForPost:
    properties:
      fullname:
        type: string
      id:
        type: integer
      role_id:
        type: integer
      url_avatar:
        type: string
      url_background_profile:
        type: string
      user_id:
        type: integer
    type: object
  models.AccountResponse:
    properties:
      address:
        type: string
      country:
        type: string
      fullname:
        type: string
      gender:
        type: integer
      id:
        type: integer
      is_upgrade:
        type: boolean
      language:
        type: string
      url_avatar:
        type: string
      url_background_profile:
        type: string
      user_id:
        type: integer
    type: object
  models.CommentRequest:
    properties:
      account_id:
        type: integer
      description:
        type: string
      post_top_id:
        type: integer
    required:
    - account_id
    - description
    - post_top_id
    type: object
  models.CommentResponse:
    properties:
      account:
        $ref: '#/definitions/models.AccountForPost'
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      post_top_id:
        type: integer
    type: object
  models.LoginRequest:
    properties:
      password:
        example: kocanpass
        type: string
      username:
        example: HiroPhent
        type: string
    type: object
  models.LoginResponse:
    properties:
      access_token:
        type: string
    type: object
  models.PostResponse:
    properties:
      account:
        $ref: '#/definitions/models.AccountForPost'
      account_id:
        type: integer
      created_at:
        type: string
      description:
        type: string
      id:
        type: integer
      images:
        items:
          $ref: '#/definitions/db.PostImage'
        type: array
      lat: {}
      lng: {}
      post_type_id:
        type: integer
    type: object
  models.RegisterResponse:
    properties:
      created_at:
        type: string
      email:
        type: string
      id:
        type: integer
      username:
        type: string
    required:
    - username
    type: object
  models.UpdateCommentRequest:
    properties:
      description:
        type: string
    required:
    - description
    type: object
  models.UpdatePostRequest:
    properties:
      description:
        type: string
      id:
        type: integer
    type: object
  response.ErrSwaggerJson:
    properties:
      code:
        type: integer
      data: {}
      message:
        type: string
    type: object
host: http://foodioo.camenryder.xyz:80
info:
  contact: {}
  description: This is SocialFood Swagger.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Foodioo Documentations
  version: "1.0"
paths:
  /accounts/me:
    get:
      consumes:
      - application/json
      description: Login to be more handsome
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.AccountResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrSwaggerJson'
      security:
      - BearerAuth: []
      summary: It's you
      tags:
      - accounts
  /comments:
    get:
      consumes:
      - application/json
      description: Get list post with post_top_id, page and page size (Limit-Offset)
      parameters:
      - description: Post ID
        in: query
        name: post_id
        required: true
        type: integer
      - description: Page
        in: query
        name: page
        required: true
        type: integer
      - description: Page size
        in: query
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.CommentResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrSwaggerJson'
      summary: Get list post
      tags:
      - Comments
    post:
      consumes:
      - application/json
      description: Create comment
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CommentRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.CommentResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrSwaggerJson'
      security:
      - BearerAuth: []
      summary: Create comment
      tags:
      - Comments
  /comments/{id}:
    delete:
      consumes:
      - application/json
      description: Delete comment
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No content
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrSwaggerJson'
      security:
      - BearerAuth: []
      summary: Delete Comment
      tags:
      - Comments
    put:
      consumes:
      - application/json
      description: Just update content post
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateCommentRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.CommentResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrSwaggerJson'
      security:
      - BearerAuth: []
      summary: Update Comment
      tags:
      - Comments
  /posts:
    get:
      consumes:
      - application/json
      description: Get list post with page and page size (Limit-Offset)
      parameters:
      - description: Page
        in: query
        name: page
        required: true
        type: integer
      - description: Page size
        in: query
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PostResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrSwaggerJson'
      summary: Get list post
      tags:
      - Posts
    post:
      consumes:
      - multipart/form-data
      description: Create post
      parameters:
      - description: Description
        in: formData
        name: description
        type: string
      - description: Account ID
        in: formData
        name: account_id
        required: true
        type: string
      - description: Direct X
        in: formData
        name: direct_x
        type: string
      - description: Direct Y
        in: formData
        name: direct_y
        type: string
      - collectionFormat: csv
        description: Images post
        in: formData
        items:
          type: file
        name: images
        type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.PostResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrSwaggerJson'
      security:
      - BearerAuth: []
      summary: Create post
      tags:
      - Posts
  /posts/:
    put:
      consumes:
      - application/json
      description: Just update content post
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdatePostRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/models.PostResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrSwaggerJson'
      security:
      - BearerAuth: []
      summary: Update post
      tags:
      - Posts
  /posts/images/{id}:
    delete:
      consumes:
      - application/json
      description: Delete image when update post (maybe)
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No content
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrSwaggerJson'
      security:
      - BearerAuth: []
      summary: Delete Image
      tags:
      - Posts
  /posts/person:
    get:
      consumes:
      - application/json
      description: Get list post with account_id, page and page size (Limit-Offset)
      parameters:
      - description: Account ID
        in: query
        name: account_id
        required: true
        type: integer
      - description: Page
        in: query
        name: page
        required: true
        type: integer
      - description: Page size
        in: query
        name: page_size
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.PostResponse'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrSwaggerJson'
      summary: Get list post
      tags:
      - Posts
  /posts/soft-delete/{id}:
    post:
      consumes:
      - application/json
      description: Just Delete post
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No content
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrSwaggerJson'
      security:
      - BearerAuth: []
      summary: Delete post
      tags:
      - Posts
  /users/login:
    post:
      consumes:
      - application/json
      description: Login to be more handsome
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.LoginResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrSwaggerJson'
      summary: Login user
      tags:
      - users
  /users/register:
    post:
      consumes:
      - application/json
      description: Join with us
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/db.RegisterRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.RegisterResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.ErrSwaggerJson'
      summary: Register user
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
